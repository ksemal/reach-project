{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkUserScore = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      }, () => {\n        this.checkWinningCondition();\n      });\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n      let removeWrongLetters = this.state.guessedletters.filter(item => {\n        return this.state.word.includes(item);\n      });\n\n      if (removeWrongLetters.sort().toString() === removeDublicates.sort().toString() && this.state.guesses > 0) {\n        this.setState({\n          endGame: \"win\"\n        });\n      } else if (this.state.guesses === 0) {\n        this.setState({\n          endGame: \"lose\"\n        });\n      }\n    };\n\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      endGame: this.state.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(Alphabet, {\n      onClick: this.checkUserScore,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }) : null, React.createElement(ScoreBoard, {\n      guesses: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Result, {\n      guesses: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","Result","App","Component","constructor","props","checkUserScore","letter","state","guessedletters","includes","incrementor","word","setState","prevState","guesses","checkWinningCondition","removeDublicates","filter","item","index","indexOf","removeWrongLetters","sort","toString","endGame","difficulty","componentDidMount","getWord","getWords","then","response","oneWordArray","data","split","catch","error","console","log","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkUserScore = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n    this.setState(\n      prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      },\n      () => {\n        this.checkWinningCondition();\n      }\n    );\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    let removeWrongLetters = this.state.guessedletters.filter(item => {\n      return this.state.word.includes(item);\n    });\n\n    if (\n      removeWrongLetters.sort().toString() ===\n        removeDublicates.sort().toString() &&\n      this.state.guesses > 0\n    ) {\n      this.setState({ endGame: \"win\" });\n    } else if (this.state.guesses === 0) {\n      this.setState({ endGame: \"lose\" });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            endGame={this.state.endGame}\n          />\n        ) : null}\n        {this.state.guesses > 0 ? (\n          <Alphabet\n            onClick={this.checkUserScore}\n            guessedLetters={this.state.guessedletters}\n            word={this.state.word}\n          />\n        ) : null}\n\n        <ScoreBoard guesses={this.state.guesses} />\n        <Result guesses={this.state.guesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
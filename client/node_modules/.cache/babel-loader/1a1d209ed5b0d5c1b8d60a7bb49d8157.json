{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkUserScore = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      this.checkWinningCondition();\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      });\n    };\n\n    this.checkWinningCondition = () => {\n      console.log(\"comp\");\n      console.log(this.state);\n      console.log(this.state.word.sort().toString());\n      let removeDublicates = this.state.word.filter(function (item, index) {\n        return this.state.word.indexOf(item) >= index;\n      });\n      console.log(removeDublicates.sort().toString());\n    };\n\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3,\n      win: false\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      win: this.state.win,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(Alphabet, {\n      onClick: this.checkUserScore,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }) : null, React.createElement(ScoreBoard, {\n      score: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","App","Component","constructor","props","checkUserScore","letter","state","guessedletters","includes","checkWinningCondition","incrementor","word","setState","prevState","guesses","console","log","sort","toString","removeDublicates","filter","item","index","indexOf","difficulty","win","componentDidMount","getWord","getWords","then","response","oneWordArray","data","split","catch","error","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3,\n      win: false\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkUserScore = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    this.checkWinningCondition();\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n    this.setState(prevState => {\n      return {\n        guesses: prevState.guesses + incrementor,\n        guessedletters: [...this.state.guessedletters, letter]\n      };\n    });\n  };\n\n  checkWinningCondition = () => {\n    console.log(\"comp\");\n    console.log(this.state);\n    console.log(this.state.word.sort().toString());\n    let removeDublicates = this.state.word.filter(function(item, index) {\n      return this.state.word.indexOf(item) >= index;\n    });\n    console.log(removeDublicates.sort().toString());\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            win={this.state.win}\n          />\n        ) : null}\n        {this.state.guesses > 0 ? (\n          <Alphabet\n            onClick={this.checkUserScore}\n            guessedLetters={this.state.guessedletters}\n            word={this.state.word}\n          />\n        ) : null}\n\n        <ScoreBoard score={this.state.guesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
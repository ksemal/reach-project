{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkUserScore = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      this.checkWinningCondition();\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      });\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n\n      if (this.state.guessedletters.sort().toString() === removeDublicates.sort().toString() && this.state.guesses > 0) {\n        this.setState({\n          endGame: \"win\"\n        });\n      } else if (this.state.guesses === 0) {\n        this.setState({\n          endGame: \"lose\"\n        });\n      }\n    };\n\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      endGame: this.state.win,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(Alphabet, {\n      onClick: this.checkUserScore,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : null, React.createElement(ScoreBoard, {\n      score: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","App","Component","constructor","props","checkUserScore","letter","state","guessedletters","includes","checkWinningCondition","incrementor","word","setState","prevState","guesses","removeDublicates","filter","item","index","indexOf","sort","toString","endGame","difficulty","componentDidMount","getWord","getWords","then","response","oneWordArray","data","split","catch","error","console","log","render","win"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      guessedletters: [],\n      guesses: 3\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkUserScore = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    this.checkWinningCondition();\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n    this.setState(prevState => {\n      return {\n        guesses: prevState.guesses + incrementor,\n        guessedletters: [...this.state.guessedletters, letter]\n      };\n    });\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    if (\n      this.state.guessedletters.sort().toString() ===\n        removeDublicates.sort().toString() &&\n      this.state.guesses > 0\n    ) {\n      this.setState({ endGame: \"win\" });\n    } else if (this.state.guesses === 0) {\n      this.setState({ endGame: \"lose\" });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            endGame={this.state.win}\n          />\n        ) : null}\n        {this.state.guesses > 0 ? (\n          <Alphabet\n            onClick={this.checkUserScore}\n            guessedLetters={this.state.guessedletters}\n            word={this.state.word}\n          />\n        ) : null}\n\n        <ScoreBoard score={this.state.guesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
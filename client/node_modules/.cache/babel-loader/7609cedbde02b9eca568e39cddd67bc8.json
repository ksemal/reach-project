{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport UserName from \"./UserName\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addEventListener = () => {\n      console.log(\"add\");\n      document.addEventListener(\"keydown\", this.handleKeyDown, false);\n    };\n\n    this.removeEventListener = () => {\n      console.log(\"remove\");\n      document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n    };\n\n    this.checkLetter = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      }, () => {\n        this.checkWinningCondition();\n      });\n    };\n\n    this.handleKeyDown = event => {\n      this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n      let removeWrongLetters = this.state.guessedletters.filter(item => {\n        return this.state.word.includes(item);\n      });\n\n      if (removeWrongLetters.sort().toString() === removeDublicates.sort().toString() && this.state.guesses > 0) {\n        this.setState(prevState => {\n          return {\n            wins: prevState.wins + 1,\n            endGame: \"win\"\n          };\n        });\n      } else if (this.state.guesses === 0) {\n        this.setState(prevState => {\n          return {\n            losses: prevState.losses + 1,\n            endGame: \"lose\"\n          };\n        });\n      }\n    };\n\n    this.restartGame = () => {\n      this.getWord(this.state.difficulty);\n    };\n\n    this.changeDifficultyLevel = e => {\n      this.getWord(e.target.value);\n    };\n\n    this.addNewUser = name => {\n      console.log(name);\n    };\n\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n    this.addEventListener();\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray,\n        guessedletters: [],\n        guesses: 6,\n        endGame: null,\n        difficulty: difficulty\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(ScoreBoard, {\n      guesses: this.state.guesses,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(UserName, {\n      onClick: this.addNewUser,\n      onFocus: this.removeEventListener.bind(this),\n      onBlur: this.addEventListener.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(DifficultyLevel, {\n      onChange: this.changeDifficultyLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      endGame: this.state.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(Alphabet, {\n      onClick: this.checkLetter,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }) : null, this.state.endGame ? React.createElement(Result, {\n      endGame: this.state.endGame,\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","Result","DifficultyLevel","UserName","App","Component","constructor","props","addEventListener","console","log","document","handleKeyDown","removeEventListener","checkLetter","letter","state","guessedletters","includes","incrementor","word","setState","prevState","guesses","checkWinningCondition","event","String","fromCharCode","keyCode","toLowerCase","removeDublicates","filter","item","index","indexOf","removeWrongLetters","sort","toString","wins","endGame","losses","restartGame","getWord","difficulty","changeDifficultyLevel","e","target","value","addNewUser","name","componentDidMount","componentWillUnmount","getWords","then","response","oneWordArray","data","split","catch","error","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport UserName from \"./UserName\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n\n    this.addEventListener();\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  addEventListener = () => {\n    console.log(\"add\");\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  };\n\n  removeEventListener = () => {\n    console.log(\"remove\");\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  };\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray,\n          guessedletters: [],\n          guesses: 6,\n          endGame: null,\n          difficulty: difficulty\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkLetter = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n    this.setState(\n      prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      },\n      () => {\n        this.checkWinningCondition();\n      }\n    );\n  };\n\n  handleKeyDown = event => {\n    this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    let removeWrongLetters = this.state.guessedletters.filter(item => {\n      return this.state.word.includes(item);\n    });\n\n    if (\n      removeWrongLetters.sort().toString() ===\n        removeDublicates.sort().toString() &&\n      this.state.guesses > 0\n    ) {\n      this.setState(prevState => {\n        return {\n          wins: prevState.wins + 1,\n          endGame: \"win\"\n        };\n      });\n    } else if (this.state.guesses === 0) {\n      this.setState(prevState => {\n        return {\n          losses: prevState.losses + 1,\n          endGame: \"lose\"\n        };\n      });\n    }\n  };\n\n  restartGame = () => {\n    this.getWord(this.state.difficulty);\n  };\n\n  changeDifficultyLevel = e => {\n    this.getWord(e.target.value);\n  };\n\n  addNewUser = name => {\n    console.log(name);\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n\n        <ScoreBoard\n          guesses={this.state.guesses}\n          wins={this.state.wins}\n          losses={this.state.losses}\n        />\n\n        <UserName\n          onClick={this.addNewUser}\n          onFocus={this.removeEventListener.bind(this)}\n          onBlur={this.addEventListener.bind(this)}\n        />\n\n        <DifficultyLevel onChange={this.changeDifficultyLevel} />\n\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            endGame={this.state.endGame}\n          />\n        ) : null}\n\n        {this.state.guesses > 0 ? (\n          <Alphabet\n            onClick={this.checkLetter}\n            guessedLetters={this.state.guessedletters}\n            word={this.state.word}\n          />\n        ) : null}\n\n        {this.state.endGame ? (\n          <Result endGame={this.state.endGame} onClick={this.restartGame} />\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
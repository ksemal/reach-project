{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport Input from \"./Input\";\nimport LeaderBoard from \"./LeaderBoard\";\nimport Diagram from \"./Diagram\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addEventListener = () => {\n      document.addEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.removeEventListener = () => {\n      document.removeEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.checkWord = word => {\n      let newword = word.trim();\n      console.log(newword.length);\n    };\n\n    this.checkLetter = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      if (this.state.error) this.setState({\n        error: null\n      });\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.updateGuesses(incrementor, letter);\n    };\n\n    this.updateGuesses = (incrementor, letter) => {\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      }, () => {\n        this.checkWinningCondition();\n      });\n    };\n\n    this.handleKeyDown = event => {\n      const letterNumber = /^[0-9a-zA-Z]+$/;\n\n      if (String.fromCharCode(event.keyCode).match(letterNumber)) {\n        this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n      } else {\n        this.setState({\n          error: \"Please, use letters and numbers only!\"\n        });\n      }\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n      let removeWrongLetters = this.state.guessedletters.filter(item => {\n        return this.state.word.includes(item);\n      });\n\n      if (removeWrongLetters.sort().toString() === removeDublicates.sort().toString() && this.state.guesses > 0) {\n        var newState = Object.assign({}, this.state.leaderBoard);\n        console.log(newState);\n\n        if (newState[this.state.userName]) {\n          newState[this.state.userName] += 1;\n        } else {\n          newState[this.state.userName] = 1;\n        }\n\n        this.setState(prevState => {\n          return {\n            wins: prevState.wins + 1,\n            endGame: \"win\",\n            leaderBoard: newState\n          };\n        });\n      } else if (this.state.guesses === 0) {\n        this.setState(prevState => {\n          return {\n            losses: prevState.losses + 1,\n            endGame: \"lose\"\n          };\n        });\n      }\n    };\n\n    this.restartGame = () => {\n      this.getWord(this.state.difficulty);\n    };\n\n    this.changeDifficultyLevel = e => {\n      this.getWord(e.target.value);\n    };\n\n    this.addNewUser = name => {\n      if (name) {\n        this.setState({\n          userName: name,\n          error: \"\"\n        });\n      } else {\n        if (this.state.error === \"Please, enter a valid name\") return;\n        this.setState({\n          error: \"Please, enter a valid name\"\n        });\n      }\n    };\n\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray,\n        guessedletters: [],\n        guesses: 6,\n        endGame: null,\n        difficulty: difficulty,\n        name: null\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(ScoreBoard, {\n      guesses: this.state.guesses,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Input, {\n      onClickUser: this.addNewUser,\n      onFocus: this.removeEventListener,\n      onBlur: this.addEventListener,\n      type: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(DifficultyLevel, {\n      onChange: this.changeDifficultyLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      endGame: this.state.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(React.Fragment, null, React.createElement(Alphabet, {\n      onClick: this.checkLetter,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      error: this.state.error ? this.state.error : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(Input, {\n      onClickWord: this.checkWord,\n      onFocus: this.removeEventListener,\n      onBlur: this.addEventListener,\n      type: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })) : null, this.state.endGame ? React.createElement(Result, {\n      endGame: this.state.endGame,\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }) : null, Object.keys(this.state.leaderBoard).length ? React.createElement(LeaderBoard, {\n      leaderBoard: this.state.leaderBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }) : null, this.state.word ? React.createElement(Diagram, {\n      guesses: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","Result","DifficultyLevel","Input","LeaderBoard","Diagram","App","Component","constructor","props","addEventListener","document","handleKeyDown","removeEventListener","checkWord","word","newword","trim","console","log","length","checkLetter","letter","state","guessedletters","includes","error","setState","incrementor","updateGuesses","prevState","guesses","checkWinningCondition","event","letterNumber","String","fromCharCode","keyCode","match","toLowerCase","removeDublicates","filter","item","index","indexOf","removeWrongLetters","sort","toString","newState","Object","assign","leaderBoard","userName","wins","endGame","losses","restartGame","getWord","difficulty","changeDifficultyLevel","e","target","value","addNewUser","name","componentDidMount","componentDidUpdate","componentWillUnmount","getWords","then","response","oneWordArray","data","split","catch","render","keys"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport Input from \"./Input\";\nimport LeaderBoard from \"./LeaderBoard\";\nimport Diagram from \"./Diagram\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  addEventListener = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  removeEventListener = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray,\n          guessedletters: [],\n          guesses: 6,\n          endGame: null,\n          difficulty: difficulty,\n          name: null\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkWord = word => {\n    let newword = word.trim();\n    console.log(newword.length);\n  };\n\n  checkLetter = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    if (this.state.error) this.setState({ error: null });\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n\n    this.updateGuesses(incrementor, letter);\n  };\n\n  updateGuesses = (incrementor, letter) => {\n    this.setState(\n      prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      },\n      () => {\n        this.checkWinningCondition();\n      }\n    );\n  };\n\n  handleKeyDown = event => {\n    const letterNumber = /^[0-9a-zA-Z]+$/;\n\n    if (String.fromCharCode(event.keyCode).match(letterNumber)) {\n      this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n    } else {\n      this.setState({ error: \"Please, use letters and numbers only!\" });\n    }\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    let removeWrongLetters = this.state.guessedletters.filter(item => {\n      return this.state.word.includes(item);\n    });\n\n    if (\n      removeWrongLetters.sort().toString() ===\n        removeDublicates.sort().toString() &&\n      this.state.guesses > 0\n    ) {\n      var newState = Object.assign({}, this.state.leaderBoard);\n      console.log(newState);\n      if (newState[this.state.userName]) {\n        newState[this.state.userName] += 1;\n      } else {\n        newState[this.state.userName] = 1;\n      }\n\n      this.setState(prevState => {\n        return {\n          wins: prevState.wins + 1,\n          endGame: \"win\",\n          leaderBoard: newState\n        };\n      });\n    } else if (this.state.guesses === 0) {\n      this.setState(prevState => {\n        return {\n          losses: prevState.losses + 1,\n          endGame: \"lose\"\n        };\n      });\n    }\n  };\n\n  restartGame = () => {\n    this.getWord(this.state.difficulty);\n  };\n\n  changeDifficultyLevel = e => {\n    this.getWord(e.target.value);\n  };\n\n  addNewUser = name => {\n    if (name) {\n      this.setState({\n        userName: name,\n        error: \"\"\n      });\n    } else {\n      if (this.state.error === \"Please, enter a valid name\") return;\n\n      this.setState({\n        error: \"Please, enter a valid name\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n\n        <ScoreBoard\n          guesses={this.state.guesses}\n          wins={this.state.wins}\n          losses={this.state.losses}\n          userName={this.state.userName}\n        />\n\n        <Input\n          onClickUser={this.addNewUser}\n          onFocus={this.removeEventListener}\n          onBlur={this.addEventListener}\n          type=\"user\"\n        />\n\n        <DifficultyLevel onChange={this.changeDifficultyLevel} />\n\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            endGame={this.state.endGame}\n          />\n        ) : null}\n\n        {this.state.guesses > 0 ? (\n          <>\n            <Alphabet\n              onClick={this.checkLetter}\n              guessedLetters={this.state.guessedletters}\n              word={this.state.word}\n              error={this.state.error ? this.state.error : \"\"}\n            />\n\n            <Input\n              onClickWord={this.checkWord}\n              onFocus={this.removeEventListener}\n              onBlur={this.addEventListener}\n              type=\"word\"\n            />\n          </>\n        ) : null}\n\n        {this.state.endGame ? (\n          <Result endGame={this.state.endGame} onClick={this.restartGame} />\n        ) : null}\n\n        {Object.keys(this.state.leaderBoard).length ? (\n          <LeaderBoard leaderBoard={this.state.leaderBoard} />\n        ) : null}\n\n        {this.state.word ? <Diagram guesses={this.state.guesses} /> : null}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport UserName from \"./UserName\";\nimport LeaderBoard from \"./LeaderBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addEventListener = () => {\n      document.addEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.removeEventListener = () => {\n      document.removeEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.checkLetter = letter => {\n      if (this.state.guessedletters.includes(letter)) return;\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      }, () => {\n        this.checkWinningCondition();\n      });\n    };\n\n    this.handleKeyDown = event => {\n      this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n      let removeWrongLetters = this.state.guessedletters.filter(item => {\n        return this.state.word.includes(item);\n      });\n\n      if (removeWrongLetters.sort().toString() === removeDublicates.sort().toString() && this.state.guesses > 0) {\n        var newState = Object.assign({}, this.state.leaderBoard);\n\n        if (newState[this.state.name]) {\n          newState[this.state.name] += 1;\n        } else {\n          newState[this.state.name] = 1;\n        }\n\n        this.setState(prevState => {\n          return {\n            wins: prevState.wins + 1,\n            endGame: \"win\",\n            leaderBoard: newState\n          };\n        });\n      } else if (this.state.guesses === 0) {\n        this.setState(prevState => {\n          return {\n            losses: prevState.losses + 1,\n            endGame: \"lose\"\n          };\n        });\n      }\n    };\n\n    this.restartGame = () => {\n      this.getWord(this.state.difficulty);\n    };\n\n    this.changeDifficultyLevel = e => {\n      this.getWord(e.target.value);\n    };\n\n    this.addNewUser = name => {\n      this.setState({\n        userName: name\n      });\n    };\n\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  getWord(difficulty) {\n    API.getWords(difficulty).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray,\n        guessedletters: [],\n        guesses: 6,\n        endGame: null,\n        difficulty: difficulty,\n        name: null\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(ScoreBoard, {\n      guesses: this.state.guesses,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(UserName, {\n      onClick: this.addNewUser,\n      onFocus: this.removeEventListener,\n      onBlur: this.addEventListener,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(DifficultyLevel, {\n      onChange: this.changeDifficultyLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedletters,\n      guesses: this.state.guesses,\n      endGame: this.state.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 ? React.createElement(Alphabet, {\n      onClick: this.checkLetter,\n      guessedLetters: this.state.guessedletters,\n      word: this.state.word,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }) : null, this.state.endGame ? React.createElement(Result, {\n      endGame: this.state.endGame,\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }) : null, React.createElement(LeaderBoard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","Result","DifficultyLevel","UserName","LeaderBoard","App","Component","constructor","props","addEventListener","document","handleKeyDown","removeEventListener","checkLetter","letter","state","guessedletters","includes","incrementor","word","setState","prevState","guesses","checkWinningCondition","event","String","fromCharCode","keyCode","toLowerCase","removeDublicates","filter","item","index","indexOf","removeWrongLetters","sort","toString","newState","Object","assign","leaderBoard","name","wins","endGame","losses","restartGame","getWord","difficulty","changeDifficultyLevel","e","target","value","addNewUser","userName","componentDidMount","componentDidUpdate","console","log","componentWillUnmount","getWords","then","response","oneWordArray","data","split","catch","error","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport DifficultyLevel from \"./DifficultyLevel\";\nimport UserName from \"./UserName\";\nimport LeaderBoard from \"./LeaderBoard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty);\n\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  addEventListener = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  removeEventListener = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  getWord(difficulty) {\n    API.getWords(difficulty)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray,\n          guessedletters: [],\n          guesses: 6,\n          endGame: null,\n          difficulty: difficulty,\n          name: null\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkLetter = letter => {\n    if (this.state.guessedletters.includes(letter)) return;\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n    this.setState(\n      prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedletters: [...this.state.guessedletters, letter]\n        };\n      },\n      () => {\n        this.checkWinningCondition();\n      }\n    );\n  };\n\n  handleKeyDown = event => {\n    this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    let removeWrongLetters = this.state.guessedletters.filter(item => {\n      return this.state.word.includes(item);\n    });\n\n    if (\n      removeWrongLetters.sort().toString() ===\n        removeDublicates.sort().toString() &&\n      this.state.guesses > 0\n    ) {\n      var newState = Object.assign({}, this.state.leaderBoard);\n      if (newState[this.state.name]) {\n        newState[this.state.name] += 1;\n      } else {\n        newState[this.state.name] = 1;\n      }\n\n      this.setState(prevState => {\n        return {\n          wins: prevState.wins + 1,\n          endGame: \"win\",\n          leaderBoard: newState\n        };\n      });\n    } else if (this.state.guesses === 0) {\n      this.setState(prevState => {\n        return {\n          losses: prevState.losses + 1,\n          endGame: \"lose\"\n        };\n      });\n    }\n  };\n\n  restartGame = () => {\n    this.getWord(this.state.difficulty);\n  };\n\n  changeDifficultyLevel = e => {\n    this.getWord(e.target.value);\n  };\n\n  addNewUser = name => {\n    this.setState({\n      userName: name\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n\n        <ScoreBoard\n          guesses={this.state.guesses}\n          wins={this.state.wins}\n          losses={this.state.losses}\n          userName={this.state.userName}\n        />\n\n        <UserName\n          onClick={this.addNewUser}\n          onFocus={this.removeEventListener}\n          onBlur={this.addEventListener}\n        />\n\n        <DifficultyLevel onChange={this.changeDifficultyLevel} />\n\n        {this.state.word ? (\n          <HiddenWord\n            word={this.state.word}\n            guessedLetters={this.state.guessedletters}\n            guesses={this.state.guesses}\n            endGame={this.state.endGame}\n          />\n        ) : null}\n\n        {this.state.guesses > 0 ? (\n          <Alphabet\n            onClick={this.checkLetter}\n            guessedLetters={this.state.guessedletters}\n            word={this.state.word}\n          />\n        ) : null}\n\n        {this.state.endGame ? (\n          <Result endGame={this.state.endGame} onClick={this.restartGame} />\n        ) : null}\n\n        <LeaderBoard />\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
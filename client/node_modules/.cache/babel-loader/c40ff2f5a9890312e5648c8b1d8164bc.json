{"ast":null,"code":"var _jsxFileName = \"/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js\";\nimport React from \"react\";\nimport API from \"./utils/API\";\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport Settings from \"./Settings\";\nimport Input from \"./Input\";\nimport LeaderBoard from \"./LeaderBoard\";\nimport Diagram from \"./Diagram\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addEventListener = () => {\n      document.addEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.removeEventListener = () => {\n      document.removeEventListener(\"keydown\", this.handleKeyDown);\n    };\n\n    this.checkWord = word => {\n      if (!word) {\n        this.setState({\n          error: \"Please, enter a valid word\"\n        });\n        return;\n      }\n\n      let trimWord = word.trim();\n      let wordToArr = trimWord.split(\"\");\n      let removeDublicates = wordToArr.filter((item, index) => {\n        return wordToArr.indexOf(item) >= index;\n      });\n\n      if (trimWord === this.state.word.join(\"\")) {\n        this.updateGuesses(0, removeDublicates);\n      } else {\n        this.updateGuesses(-1, removeDublicates);\n      }\n    };\n\n    this.checkLetter = letter => {\n      if (this.state.guessedLetters.includes(letter)) return;\n      if (this.state.error) this.setState({\n        error: null\n      });\n      let incrementor = 0;\n      if (!this.state.word.includes(letter)) incrementor = -1;\n      this.updateGuesses(incrementor, letter);\n    };\n\n    this.updateGuesses = (incrementor, letter) => {\n      if (!Array.isArray(letter)) {\n        letter = [letter];\n      }\n\n      this.setState(prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedLetters: [...this.state.guessedLetters, ...letter]\n        };\n      }, () => {\n        this.checkWinningCondition();\n      });\n    };\n\n    this.handleKeyDown = event => {\n      const letterNumber = /^[0-9a-zA-Z]+$/;\n\n      if (String.fromCharCode(event.keyCode).match(letterNumber)) {\n        this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n      } else {\n        this.setState({\n          error: \"Please, use letters and numbers only!\"\n        });\n      }\n    };\n\n    this.checkWinningCondition = () => {\n      let removeDublicates = this.state.word.filter((item, index) => {\n        return this.state.word.indexOf(item) >= index;\n      });\n      removeDublicates = removeDublicates.sort().join(\"\").replace(/\\s/g, \"\");\n      let removeWrongLetters = this.state.guessedLetters.filter(item => {\n        return this.state.word.includes(item);\n      });\n      removeWrongLetters = removeWrongLetters.sort().join(\"\").replace(/\\s/g, \"\");\n      console.log(removeDublicates);\n      console.log(this.state.guessedLetters);\n      console.log(removeWrongLetters);\n\n      if (removeWrongLetters === removeDublicates && this.state.guesses > 0) {\n        var newState = Object.assign({}, this.state.leaderBoard);\n        console.log(newState);\n        console.log(newState[this.state.userName]);\n\n        if (newState[this.state.userName]) {\n          newState[this.state.userName] += 1;\n        } else if (this.state.userName) {\n          newState[this.state.userName] = 1;\n        }\n\n        this.setState(prevState => {\n          return {\n            wins: prevState.wins + 1,\n            endGame: \"win\",\n            leaderBoard: newState\n          };\n        });\n        this.removeEventListener();\n      } else if (this.state.guesses === 0) {\n        this.setState(prevState => {\n          return {\n            losses: prevState.losses + 1,\n            endGame: \"lose\"\n          };\n        });\n        this.removeEventListener();\n      }\n    };\n\n    this.restartGame = () => {\n      this.getWord(this.state.difficulty, this.state.type);\n      this.addEventListener();\n    };\n\n    this.changeDifficultyLevel = e => {\n      this.getWord(e.target.value, this.state.type);\n    };\n\n    this.changeType = e => {\n      this.getWord(this.state.difficulty, e.target.value);\n    };\n\n    this.addNewUser = name => {\n      if (name) {\n        this.setState({\n          userName: name,\n          error: \"\",\n          wins: 0\n        });\n      } else {\n        if (this.state.error === \"Please, enter a valid name\") return;\n        this.setState({\n          error: \"Please, enter a valid name\"\n        });\n      }\n    };\n\n    this.state = {\n      difficulty: 3,\n      type: \"word\",\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty, this.state.type);\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  getWord(difficulty, type) {\n    API.getWords(difficulty, type).then(response => {\n      let oneWordArray = response.data.split(\"\");\n      this.setState({\n        word: oneWordArray,\n        guessedLetters: [],\n        guesses: 6,\n        endGame: null,\n        difficulty: difficulty,\n        type: type,\n        name: null\n      });\n    }).catch(function (error) {\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(ScoreBoard, {\n      guesses: this.state.guesses,\n      wins: this.state.wins,\n      losses: this.state.losses,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Input, {\n      onClickUser: this.addNewUser,\n      onFocus: this.removeEventListener,\n      onBlur: this.addEventListener,\n      type: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), Object.keys(this.state.leaderBoard).length ? React.createElement(LeaderBoard, {\n      leaderBoard: this.state.leaderBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }) : null), React.createElement(Settings, {\n      onChangeDifficulty: this.changeDifficultyLevel,\n      onChangeType: this.changeType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, this.state.word ? React.createElement(HiddenWord, {\n      word: this.state.word,\n      guessedLetters: this.state.guessedLetters,\n      guesses: this.state.guesses,\n      endGame: this.state.endGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }) : null, this.state.guesses > 0 && !this.state.endGame ? React.createElement(React.Fragment, null, React.createElement(Input, {\n      onClickWord: this.checkWord,\n      onFocus: this.removeEventListener,\n      onBlur: this.addEventListener,\n      type: \"word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(Alphabet, {\n      onClick: this.checkLetter,\n      guessedLetters: this.state.guessedLetters,\n      word: this.state.word,\n      error: this.state.error ? this.state.error : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })) : null, this.state.endGame ? React.createElement(Result, {\n      endGame: this.state.endGame,\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }) : null), React.createElement(\"div\", {\n      className: \"item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, this.state.word ? React.createElement(Diagram, {\n      guesses: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }) : null)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ksuuushi/Bootcamp_UNC/reach-project/client/src/App.js"],"names":["React","API","Header","HiddenWord","Alphabet","ScoreBoard","Result","Settings","Input","LeaderBoard","Diagram","App","Component","constructor","props","addEventListener","document","handleKeyDown","removeEventListener","checkWord","word","setState","error","trimWord","trim","wordToArr","split","removeDublicates","filter","item","index","indexOf","state","join","updateGuesses","checkLetter","letter","guessedLetters","includes","incrementor","Array","isArray","prevState","guesses","checkWinningCondition","event","letterNumber","String","fromCharCode","keyCode","match","toLowerCase","sort","replace","removeWrongLetters","console","log","newState","Object","assign","leaderBoard","userName","wins","endGame","losses","restartGame","getWord","difficulty","type","changeDifficultyLevel","e","target","value","changeType","addNewUser","name","componentDidMount","componentDidUpdate","componentWillUnmount","getWords","then","response","oneWordArray","data","catch","render","keys","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwBnBC,gBAxBmB,GAwBA,MAAM;AACvBC,MAAAA,QAAQ,CAACD,gBAAT,CAA0B,SAA1B,EAAqC,KAAKE,aAA1C;AACD,KA1BkB;;AAAA,SA4BnBC,mBA5BmB,GA4BG,MAAM;AAC1BF,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwC,KAAKD,aAA7C;AACD,KA9BkB;;AAAA,SAsDnBE,SAtDmB,GAsDPC,IAAI,IAAI;AAClB,UAAI,CAACA,IAAL,EAAW;AACT,aAAKC,QAAL,CAAc;AACZC,UAAAA,KAAK,EAAE;AADK,SAAd;AAGA;AACD;;AACD,UAAIC,QAAQ,GAAGH,IAAI,CAACI,IAAL,EAAf;AACA,UAAIC,SAAS,GAAGF,QAAQ,CAACG,KAAT,CAAe,EAAf,CAAhB;AACA,UAAIC,gBAAgB,GAAGF,SAAS,CAACG,MAAV,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvD,eAAOL,SAAS,CAACM,OAAV,CAAkBF,IAAlB,KAA2BC,KAAlC;AACD,OAFsB,CAAvB;;AAGA,UAAIP,QAAQ,KAAK,KAAKS,KAAL,CAAWZ,IAAX,CAAgBa,IAAhB,CAAqB,EAArB,CAAjB,EAA2C;AACzC,aAAKC,aAAL,CAAmB,CAAnB,EAAsBP,gBAAtB;AACD,OAFD,MAEO;AACL,aAAKO,aAAL,CAAmB,CAAC,CAApB,EAAuBP,gBAAvB;AACD;AACF,KAvEkB;;AAAA,SAyEnBQ,WAzEmB,GAyELC,MAAM,IAAI;AACtB,UAAI,KAAKJ,KAAL,CAAWK,cAAX,CAA0BC,QAA1B,CAAmCF,MAAnC,CAAJ,EAAgD;AAEhD,UAAI,KAAKJ,KAAL,CAAWV,KAAf,EAAsB,KAAKD,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAd;AAEtB,UAAIiB,WAAW,GAAG,CAAlB;AACA,UAAI,CAAC,KAAKP,KAAL,CAAWZ,IAAX,CAAgBkB,QAAhB,CAAyBF,MAAzB,CAAL,EAAuCG,WAAW,GAAG,CAAC,CAAf;AAEvC,WAAKL,aAAL,CAAmBK,WAAnB,EAAgCH,MAAhC;AACD,KAlFkB;;AAAA,SAoFnBF,aApFmB,GAoFH,CAACK,WAAD,EAAcH,MAAd,KAAyB;AACvC,UAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAL,EAA4B;AAC1BA,QAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACD;;AAED,WAAKf,QAAL,CACEqB,SAAS,IAAI;AACX,eAAO;AACLC,UAAAA,OAAO,EAAED,SAAS,CAACC,OAAV,GAAoBJ,WADxB;AAELF,UAAAA,cAAc,EAAE,CAAC,GAAG,KAAKL,KAAL,CAAWK,cAAf,EAA+B,GAAGD,MAAlC;AAFX,SAAP;AAID,OANH,EAOE,MAAM;AACJ,aAAKQ,qBAAL;AACD,OATH;AAWD,KApGkB;;AAAA,SAsGnB3B,aAtGmB,GAsGH4B,KAAK,IAAI;AACvB,YAAMC,YAAY,GAAG,gBAArB;;AAEA,UAAIC,MAAM,CAACC,YAAP,CAAoBH,KAAK,CAACI,OAA1B,EAAmCC,KAAnC,CAAyCJ,YAAzC,CAAJ,EAA4D;AAC1D,aAAKX,WAAL,CAAiBY,MAAM,CAACC,YAAP,CAAoBH,KAAK,CAACI,OAA1B,EAAmCE,WAAnC,EAAjB;AACD,OAFD,MAEO;AACL,aAAK9B,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD;AACF,KA9GkB;;AAAA,SAgHnBsB,qBAhHmB,GAgHK,MAAM;AAC5B,UAAIjB,gBAAgB,GAAG,KAAKK,KAAL,CAAWZ,IAAX,CAAgBQ,MAAhB,CAAuB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7D,eAAO,KAAKE,KAAL,CAAWZ,IAAX,CAAgBW,OAAhB,CAAwBF,IAAxB,KAAiCC,KAAxC;AACD,OAFsB,CAAvB;AAIAH,MAAAA,gBAAgB,GAAGA,gBAAgB,CAChCyB,IADgB,GAEhBnB,IAFgB,CAEX,EAFW,EAGhBoB,OAHgB,CAGR,KAHQ,EAGD,EAHC,CAAnB;AAKA,UAAIC,kBAAkB,GAAG,KAAKtB,KAAL,CAAWK,cAAX,CAA0BT,MAA1B,CAAiCC,IAAI,IAAI;AAChE,eAAO,KAAKG,KAAL,CAAWZ,IAAX,CAAgBkB,QAAhB,CAAyBT,IAAzB,CAAP;AACD,OAFwB,CAAzB;AAGAyB,MAAAA,kBAAkB,GAAGA,kBAAkB,CACpCF,IADkB,GAElBnB,IAFkB,CAEb,EAFa,EAGlBoB,OAHkB,CAGV,KAHU,EAGH,EAHG,CAArB;AAKAE,MAAAA,OAAO,CAACC,GAAR,CAAY7B,gBAAZ;AACA4B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWK,cAAvB;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;;AACA,UAAIA,kBAAkB,KAAK3B,gBAAvB,IAA2C,KAAKK,KAAL,CAAWW,OAAX,GAAqB,CAApE,EAAuE;AACrE,YAAIc,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK3B,KAAL,CAAW4B,WAA7B,CAAf;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAAC,KAAKzB,KAAL,CAAW6B,QAAZ,CAApB;;AACA,YAAIJ,QAAQ,CAAC,KAAKzB,KAAL,CAAW6B,QAAZ,CAAZ,EAAmC;AACjCJ,UAAAA,QAAQ,CAAC,KAAKzB,KAAL,CAAW6B,QAAZ,CAAR,IAAiC,CAAjC;AACD,SAFD,MAEO,IAAI,KAAK7B,KAAL,CAAW6B,QAAf,EAAyB;AAC9BJ,UAAAA,QAAQ,CAAC,KAAKzB,KAAL,CAAW6B,QAAZ,CAAR,GAAgC,CAAhC;AACD;;AAED,aAAKxC,QAAL,CAAcqB,SAAS,IAAI;AACzB,iBAAO;AACLoB,YAAAA,IAAI,EAAEpB,SAAS,CAACoB,IAAV,GAAiB,CADlB;AAELC,YAAAA,OAAO,EAAE,KAFJ;AAGLH,YAAAA,WAAW,EAAEH;AAHR,WAAP;AAKD,SAND;AAQA,aAAKvC,mBAAL;AACD,OAnBD,MAmBO,IAAI,KAAKc,KAAL,CAAWW,OAAX,KAAuB,CAA3B,EAA8B;AACnC,aAAKtB,QAAL,CAAcqB,SAAS,IAAI;AACzB,iBAAO;AACLsB,YAAAA,MAAM,EAAEtB,SAAS,CAACsB,MAAV,GAAmB,CADtB;AAELD,YAAAA,OAAO,EAAE;AAFJ,WAAP;AAID,SALD;AAOA,aAAK7C,mBAAL;AACD;AACF,KAlKkB;;AAAA,SAoKnB+C,WApKmB,GAoKL,MAAM;AAClB,WAAKC,OAAL,CAAa,KAAKlC,KAAL,CAAWmC,UAAxB,EAAoC,KAAKnC,KAAL,CAAWoC,IAA/C;AACA,WAAKrD,gBAAL;AACD,KAvKkB;;AAAA,SAyKnBsD,qBAzKmB,GAyKKC,CAAC,IAAI;AAC3B,WAAKJ,OAAL,CAAaI,CAAC,CAACC,MAAF,CAASC,KAAtB,EAA6B,KAAKxC,KAAL,CAAWoC,IAAxC;AACD,KA3KkB;;AAAA,SA6KnBK,UA7KmB,GA6KNH,CAAC,IAAI;AAChB,WAAKJ,OAAL,CAAa,KAAKlC,KAAL,CAAWmC,UAAxB,EAAoCG,CAAC,CAACC,MAAF,CAASC,KAA7C;AACD,KA/KkB;;AAAA,SAiLnBE,UAjLmB,GAiLNC,IAAI,IAAI;AACnB,UAAIA,IAAJ,EAAU;AACR,aAAKtD,QAAL,CAAc;AACZwC,UAAAA,QAAQ,EAAEc,IADE;AAEZrD,UAAAA,KAAK,EAAE,EAFK;AAGZwC,UAAAA,IAAI,EAAE;AAHM,SAAd;AAKD,OAND,MAMO;AACL,YAAI,KAAK9B,KAAL,CAAWV,KAAX,KAAqB,4BAAzB,EAAuD;AAEvD,aAAKD,QAAL,CAAc;AACZC,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD;AACF,KA/LkB;;AAEjB,SAAKU,KAAL,GAAa;AACXmC,MAAAA,UAAU,EAAE,CADD;AAEXC,MAAAA,IAAI,EAAE,MAFK;AAGXN,MAAAA,IAAI,EAAE,CAHK;AAIXE,MAAAA,MAAM,EAAE,CAJG;AAKXJ,MAAAA,WAAW,EAAE;AALF,KAAb;AAOD;;AAEDgB,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,OAAL,CAAa,KAAKlC,KAAL,CAAWmC,UAAxB,EAAoC,KAAKnC,KAAL,CAAWoC,IAA/C;AAEA,SAAKrD,gBAAL;AACD;;AAED8D,EAAAA,kBAAkB,GAAG;AACnBtB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAW4B,WAAvB;AACD;;AACDkB,EAAAA,oBAAoB,GAAG;AACrB,SAAK5D,mBAAL;AACD;;AAUDgD,EAAAA,OAAO,CAACC,UAAD,EAAaC,IAAb,EAAmB;AACxBnE,IAAAA,GAAG,CAAC8E,QAAJ,CAAaZ,UAAb,EAAyBC,IAAzB,EACGY,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAczD,KAAd,CAAoB,EAApB,CAAnB;AACA,WAAKL,QAAL,CAAc;AACZD,QAAAA,IAAI,EAAE8D,YADM;AAEZ7C,QAAAA,cAAc,EAAE,EAFJ;AAGZM,QAAAA,OAAO,EAAE,CAHG;AAIZoB,QAAAA,OAAO,EAAE,IAJG;AAKZI,QAAAA,UAAU,EAAEA,UALA;AAMZC,QAAAA,IAAI,EAAEA,IANM;AAOZO,QAAAA,IAAI,EAAE;AAPM,OAAd;AASD,KAZH,EAaGS,KAbH,CAaS,UAAS9D,KAAT,EAAgB;AACrBiC,MAAAA,OAAO,CAACC,GAAR,CAAYlC,KAAZ;AACD,KAfH,EAgBG0D,IAhBH,CAgBQ,YAAW,CACf;AACD,KAlBH;AAmBD;;AA6IDK,EAAAA,MAAM,GAAG;AACP,WACE,0CACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKrD,KAAL,CAAWW,OADtB;AAEE,MAAA,IAAI,EAAE,KAAKX,KAAL,CAAW8B,IAFnB;AAGE,MAAA,MAAM,EAAE,KAAK9B,KAAL,CAAWgC,MAHrB;AAIE,MAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAW6B,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE,KAAKa,UADpB;AAEE,MAAA,OAAO,EAAE,KAAKxD,mBAFhB;AAGE,MAAA,MAAM,EAAE,KAAKH,gBAHf;AAIE,MAAA,IAAI,EAAC,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQG2C,MAAM,CAAC4B,IAAP,CAAY,KAAKtD,KAAL,CAAW4B,WAAvB,EAAoC2B,MAApC,GACC,oBAAC,WAAD;AAAa,MAAA,WAAW,EAAE,KAAKvD,KAAL,CAAW4B,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEG,IAVN,CARF,EAqBE,oBAAC,QAAD;AACE,MAAA,kBAAkB,EAAE,KAAKS,qBAD3B;AAEE,MAAA,YAAY,EAAE,KAAKI,UAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBF,CAHF,EA8BE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKzC,KAAL,CAAWZ,IAAX,GACC,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWZ,IADnB;AAEE,MAAA,cAAc,EAAE,KAAKY,KAAL,CAAWK,cAF7B;AAGE,MAAA,OAAO,EAAE,KAAKL,KAAL,CAAWW,OAHtB;AAIE,MAAA,OAAO,EAAE,KAAKX,KAAL,CAAW+B,OAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAOG,IARN,EAUG,KAAK/B,KAAL,CAAWW,OAAX,GAAqB,CAArB,IAA0B,CAAC,KAAKX,KAAL,CAAW+B,OAAtC,GACC,0CACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE,KAAK5C,SADpB;AAEE,MAAA,OAAO,EAAE,KAAKD,mBAFhB;AAGE,MAAA,MAAM,EAAE,KAAKH,gBAHf;AAIE,MAAA,IAAI,EAAC,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,QAAD;AACE,MAAA,OAAO,EAAE,KAAKoB,WADhB;AAEE,MAAA,cAAc,EAAE,KAAKH,KAAL,CAAWK,cAF7B;AAGE,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWZ,IAHnB;AAIE,MAAA,KAAK,EAAE,KAAKY,KAAL,CAAWV,KAAX,GAAmB,KAAKU,KAAL,CAAWV,KAA9B,GAAsC,EAJ/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADD,GAgBG,IA1BN,EA4BG,KAAKU,KAAL,CAAW+B,OAAX,GACC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK/B,KAAL,CAAW+B,OAA5B;AAAqC,MAAA,OAAO,EAAE,KAAKE,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEG,IA9BN,CADF,EAkCE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKjC,KAAL,CAAWZ,IAAX,GAAkB,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAKY,KAAL,CAAWW,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB,GAA6D,IADhE,CAlCF,CA9BF,CADF;AAuED;;AA1Q+B;;AA6QlC,eAAehC,GAAf","sourcesContent":["import React from \"react\";\nimport API from \"./utils/API\";\n\nimport Header from \"./Header\";\nimport HiddenWord from \"./HiddenWord\";\nimport Alphabet from \"./Alphabet\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport Result from \"./Result\";\nimport Settings from \"./Settings\";\nimport Input from \"./Input\";\nimport LeaderBoard from \"./LeaderBoard\";\nimport Diagram from \"./Diagram\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      type: \"word\",\n      wins: 0,\n      losses: 0,\n      leaderBoard: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getWord(this.state.difficulty, this.state.type);\n\n    this.addEventListener();\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.leaderBoard);\n  }\n  componentWillUnmount() {\n    this.removeEventListener();\n  }\n\n  addEventListener = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  removeEventListener = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  };\n\n  getWord(difficulty, type) {\n    API.getWords(difficulty, type)\n      .then(response => {\n        let oneWordArray = response.data.split(\"\");\n        this.setState({\n          word: oneWordArray,\n          guessedLetters: [],\n          guesses: 6,\n          endGame: null,\n          difficulty: difficulty,\n          type: type,\n          name: null\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  checkWord = word => {\n    if (!word) {\n      this.setState({\n        error: \"Please, enter a valid word\"\n      });\n      return;\n    }\n    let trimWord = word.trim();\n    let wordToArr = trimWord.split(\"\");\n    let removeDublicates = wordToArr.filter((item, index) => {\n      return wordToArr.indexOf(item) >= index;\n    });\n    if (trimWord === this.state.word.join(\"\")) {\n      this.updateGuesses(0, removeDublicates);\n    } else {\n      this.updateGuesses(-1, removeDublicates);\n    }\n  };\n\n  checkLetter = letter => {\n    if (this.state.guessedLetters.includes(letter)) return;\n\n    if (this.state.error) this.setState({ error: null });\n\n    let incrementor = 0;\n    if (!this.state.word.includes(letter)) incrementor = -1;\n\n    this.updateGuesses(incrementor, letter);\n  };\n\n  updateGuesses = (incrementor, letter) => {\n    if (!Array.isArray(letter)) {\n      letter = [letter];\n    }\n\n    this.setState(\n      prevState => {\n        return {\n          guesses: prevState.guesses + incrementor,\n          guessedLetters: [...this.state.guessedLetters, ...letter]\n        };\n      },\n      () => {\n        this.checkWinningCondition();\n      }\n    );\n  };\n\n  handleKeyDown = event => {\n    const letterNumber = /^[0-9a-zA-Z]+$/;\n\n    if (String.fromCharCode(event.keyCode).match(letterNumber)) {\n      this.checkLetter(String.fromCharCode(event.keyCode).toLowerCase());\n    } else {\n      this.setState({ error: \"Please, use letters and numbers only!\" });\n    }\n  };\n\n  checkWinningCondition = () => {\n    let removeDublicates = this.state.word.filter((item, index) => {\n      return this.state.word.indexOf(item) >= index;\n    });\n\n    removeDublicates = removeDublicates\n      .sort()\n      .join(\"\")\n      .replace(/\\s/g, \"\");\n\n    let removeWrongLetters = this.state.guessedLetters.filter(item => {\n      return this.state.word.includes(item);\n    });\n    removeWrongLetters = removeWrongLetters\n      .sort()\n      .join(\"\")\n      .replace(/\\s/g, \"\");\n\n    console.log(removeDublicates);\n    console.log(this.state.guessedLetters);\n    console.log(removeWrongLetters);\n    if (removeWrongLetters === removeDublicates && this.state.guesses > 0) {\n      var newState = Object.assign({}, this.state.leaderBoard);\n      console.log(newState);\n      console.log(newState[this.state.userName]);\n      if (newState[this.state.userName]) {\n        newState[this.state.userName] += 1;\n      } else if (this.state.userName) {\n        newState[this.state.userName] = 1;\n      }\n\n      this.setState(prevState => {\n        return {\n          wins: prevState.wins + 1,\n          endGame: \"win\",\n          leaderBoard: newState\n        };\n      });\n\n      this.removeEventListener();\n    } else if (this.state.guesses === 0) {\n      this.setState(prevState => {\n        return {\n          losses: prevState.losses + 1,\n          endGame: \"lose\"\n        };\n      });\n\n      this.removeEventListener();\n    }\n  };\n\n  restartGame = () => {\n    this.getWord(this.state.difficulty, this.state.type);\n    this.addEventListener();\n  };\n\n  changeDifficultyLevel = e => {\n    this.getWord(e.target.value, this.state.type);\n  };\n\n  changeType = e => {\n    this.getWord(this.state.difficulty, e.target.value);\n  };\n\n  addNewUser = name => {\n    if (name) {\n      this.setState({\n        userName: name,\n        error: \"\",\n        wins: 0\n      });\n    } else {\n      if (this.state.error === \"Please, enter a valid name\") return;\n\n      this.setState({\n        error: \"Please, enter a valid name\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n\n        <div className=\"container\">\n          <ScoreBoard\n            guesses={this.state.guesses}\n            wins={this.state.wins}\n            losses={this.state.losses}\n            userName={this.state.userName}\n          />\n\n          <div>\n            <Input\n              onClickUser={this.addNewUser}\n              onFocus={this.removeEventListener}\n              onBlur={this.addEventListener}\n              type=\"user\"\n            />\n\n            {Object.keys(this.state.leaderBoard).length ? (\n              <LeaderBoard leaderBoard={this.state.leaderBoard} />\n            ) : null}\n          </div>\n\n          <Settings\n            onChangeDifficulty={this.changeDifficultyLevel}\n            onChangeType={this.changeType}\n          />\n        </div>\n\n        <div className=\"container\">\n          <div className=\"item\">\n            {this.state.word ? (\n              <HiddenWord\n                word={this.state.word}\n                guessedLetters={this.state.guessedLetters}\n                guesses={this.state.guesses}\n                endGame={this.state.endGame}\n              />\n            ) : null}\n\n            {this.state.guesses > 0 && !this.state.endGame ? (\n              <>\n                <Input\n                  onClickWord={this.checkWord}\n                  onFocus={this.removeEventListener}\n                  onBlur={this.addEventListener}\n                  type=\"word\"\n                />\n\n                <Alphabet\n                  onClick={this.checkLetter}\n                  guessedLetters={this.state.guessedLetters}\n                  word={this.state.word}\n                  error={this.state.error ? this.state.error : \"\"}\n                />\n              </>\n            ) : null}\n\n            {this.state.endGame ? (\n              <Result endGame={this.state.endGame} onClick={this.restartGame} />\n            ) : null}\n          </div>\n\n          <div className=\"item\">\n            {this.state.word ? <Diagram guesses={this.state.guesses} /> : null}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}